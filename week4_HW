#Bus Routes (https://leetcode.com/problems/bus-routes/)
from collections import defaultdict, deque
from typing import List

class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        if source == target:
            return 0
        
        stop_to_routes = defaultdict(set)
        for i, route in enumerate(routes):
            for stop in route:
                stop_to_routes[stop].add(i)
        
        visited_routes = set()
        queue = deque([(source, 0)])
        
        while queue:
            current_stop, buses_taken = queue.popleft()
            if current_stop == target:
                return buses_taken
            
            for route_index in stop_to_routes[current_stop]:
                if route_index not in visited_routes:
                    visited_routes.add(route_index)
                    for next_stop in routes[route_index]:
                        queue.append((next_stop, buses_taken + 1))
        
        return -1

#Decode String (https://leetcode.com/problems/decode-string/)
class Solution:
    def decodeString(self, s: str) -> str:
        stack = []
        current_num = 0
        current_string = ''
        
        for char in s:
            if char.isdigit():
                current_num = current_num * 10 + int(char)
            elif char == '[':
                stack.append((current_string, current_num))
                current_string = ''
                current_num = 0
            elif char == ']':
                prev_string, num = stack.pop()
                current_string = prev_string + current_string * num
            else:
                current_string += char
        
        return current_string

#Number of People Aware of a Secret (https://leetcode.com/problems/number-of-people-aware-of-a-secret/)
