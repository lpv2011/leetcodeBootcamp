#String to integer atoi (https://leetcode.com/problems/string-to-integer-atoi/)
class Solution:
    def myAtoi(self, s: str) -> int:
        INT_MAX = 2**31 - 1
        INT_MIN = -2**31

        i = 0
        while i < len(s) and s[i] == ' ':
            i += 1

        if i < len(s) and (s[i] == '+' or s[i] == '-'):
            sign = -1 if s[i] == '-' else 1
            i += 1
        else:
            sign = 1

        num = 0
        while i < len(s) and s[i].isdigit():
            digit = int(s[i])
            if num > (INT_MAX - digit) // 10:
                return INT_MAX if sign == 1 else INT_MIN
            num = num * 10 + digit
            i += 1

        num *= sign

        return max(min(num, INT_MAX), INT_MIN)

#Longest repeating character replacement (https://leetcode.com/problems/longest-repeating-character-replacement/)
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        char_count = [0] * 26  
        max_count = 0 
        start = 0  

        max_length = 0 

        for end in range(len(s)):
            char_count[ord(s[end]) - ord('A')] += 1
            max_count = max(max_count, char_count[ord(s[end]) - ord('A')])

            if (end - start + 1) - max_count > k:
                char_count[ord(s[start]) - ord('A')] -= 1
                start += 1

            max_length = max(max_length, end - start + 1)

        return max_length

#Palindrome Pairs (https://leetcode.com/problems/palindrome-pairs/)
class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        wmap, ans = {}, []
        for i in range(len(words)):
            wmap[words[i]] = i
        for i in range(len(words)):
            if words[i] == "":
                for j in range(len(words)):
                    w = words[j]
                    if self.isPal(w, 0, len(w)-1) and j != i:
                        ans.append([i, j])
                        ans.append([j, i])
                continue
            bw = words[i][::-1]
            if bw in wmap:
                res = wmap[bw]
                if res != i: ans.append([i, res])
            for j in range(1, len(bw)):
                if self.isPal(bw, 0, j - 1) and bw[j:] in wmap:
                    ans.append([i, wmap[bw[j:]]])
                if self.isPal(bw, j, len(bw)-1) and bw[:j] in wmap:
                    ans.append([wmap[bw[:j]], i])
        return ans

    def isPal(self, word: str, i: int, j: int) -> bool:
        while i < j:
            if word[i] != word[j]: return False
            i += 1
            j -= 1
        return True
#reference: https://dev.to/seanpgallivan/solution-palindrome-pairs-23j6
